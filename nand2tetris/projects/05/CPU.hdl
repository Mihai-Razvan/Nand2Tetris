// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //instruction bits selectors
    And16    (a=instruction, b=instruction, out[0]=instructionBit0);
    And16    (a=instruction, b=instruction, out[1]=instructionBit1);
    And16    (a=instruction, b=instruction, out[2]=instructionBit2);
    And16    (a=instruction, b=instruction, out[3]=instructionBit3);
    And16    (a=instruction, b=instruction, out[4]=instructionBit4);
    And16    (a=instruction, b=instruction, out[5]=instructionBit5);
    And16    (a=instruction, b=instruction, out[6]=instructionBit6);
    And16    (a=instruction, b=instruction, out[7]=instructionBit7);
    And16    (a=instruction, b=instruction, out[8]=instructionBit8);
    And16    (a=instruction, b=instruction, out[9]=instructionBit9);
    And16    (a=instruction, b=instruction, out[10]=instructionBit10);
    And16    (a=instruction, b=instruction, out[11]=instructionBit11);
    And16    (a=instruction, b=instruction, out[12]=instructionBit12);
    And16    (a=instruction, b=instruction, out[15]=instructionBit15);

    Mux16    (a=instruction, b=ALUout, sel=instructionBit15, out=regAmuxVal);        //decides the A value between input value and ALU out
    Mux      (a=true, b=instructionBit5, sel=instructionBit15, out=loadA);
    Register (in=regAmuxVal, load=loadA, out=registerA, out[0..14]=addressM);

    Mux      (a=false, b=instructionBit4, sel=instructionBit15, out=loadD);
    Register (in=ALUout, load=loadD, out=registerD);

    Mux16    (a=registerA, b=inM, sel=instructionBit12, out=yForALU);   //decides the ALU y between A and M
    ALU      (x=registerD, y=yForALU, zx=instructionBit11, nx=instructionBit10, zy=instructionBit9, ny=instructionBit8, f=instructionBit7, 
              no=instructionBit6, out=ALUout, out=outM, zr=ALUzr, ng=ALUng);
    And      (a=instructionBit3, b=instructionBit15, out=writeM);
    //check if jump
    Not      (in=ALUng, out=notALUng);
    Not      (in=ALUzr, out=notALUzr);
    And      (a=notALUng, b=notALUzr, out=higherThan0);
    And      (a=instructionBit0, b=higherThan0, out=JCode0);
    And      (a=instructionBit1, b=ALUzr, out=JCode1);
    And      (a=instructionBit2, b=ALUng, out=JCode2);
    Or8Way   (in[0]=JCode0, in[1]=JCode1, in[2]=JCode2, in[3..7]=false, out=JMP);
    //control PC
    And      (a=instructionBit15, b=JMP, out=loadPC);
    PC       (in=registerA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}