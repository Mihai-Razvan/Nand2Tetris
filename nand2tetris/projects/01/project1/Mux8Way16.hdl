// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux8Way16.hdl

/**
 * 8-way 16-bit multiplexor:
 * out = a if sel == 000
 *       b if sel == 001
 *       etc.
 *       h if sel == 111
 */

CHIP Mux8Way16 {
    IN a[16], b[16], c[16], d[16],
       e[16], f[16], g[16], h[16],
       sel[3];
    OUT out[16];

    PARTS:
    Not   (in=sel[0], out=notsel0);
    Not   (in=sel[1], out=notsel1);
    Not   (in=sel[2], out=notsel2);

    And   (a=notsel1, b=notsel0, out=sel-x00);
    And   (a=notsel1, b=sel[0], out=sel-x01);
    And   (a=sel[1], b=notsel0, out=sel-x10);
    And   (a=sel[1], b=sel[0], out=sel-x11);

    And   (a=notsel2, b=sel-x00, out=sel-000);
    And   (a=notsel2, b=sel-x01, out=sel-001);
    And   (a=notsel2, b=sel-x10, out=sel-010);
    And   (a=notsel2, b=sel-x11, out=sel-011);
    And   (a=sel[2], b=sel-x00, out=sel-100);
    And   (a=sel[2], b=sel-x01, out=sel-101);
    And   (a=sel[2], b=sel-x10, out=sel-110);
    And   (a=sel[2], b=sel-x11, out=sel-111);

    And16 (a=a, b[0]=sel-000, b[1]=sel-000, b[2]=sel-000, b[3]=sel-000, b[4]=sel-000, b[5]=sel-000, b[6]=sel-000, b[7]=sel-000, b[8]=sel-000, b[9]=sel-000, b[10]=sel-000, b[11]=sel-000, b[12]=sel-000, b[13]=sel-000, b[14]=sel-000, b[15]=sel-000, out=selected-a);
    And16 (a=b, b[0]=sel-001, b[1]=sel-001, b[2]=sel-001, b[3]=sel-001, b[4]=sel-001, b[5]=sel-001, b[6]=sel-001, b[7]=sel-001, b[8]=sel-001, b[9]=sel-001, b[10]=sel-001, b[11]=sel-001, b[12]=sel-001, b[13]=sel-001, b[14]=sel-001, b[15]=sel-001, out=selected-b);
    And16 (a=c, b[0]=sel-010, b[1]=sel-010, b[2]=sel-010, b[3]=sel-010, b[4]=sel-010, b[5]=sel-010, b[6]=sel-010, b[7]=sel-010, b[8]=sel-010, b[9]=sel-010, b[10]=sel-010, b[11]=sel-010, b[12]=sel-010, b[13]=sel-010, b[14]=sel-010, b[15]=sel-010, out=selected-c);
    And16 (a=d, b[0]=sel-011, b[1]=sel-011, b[2]=sel-011, b[3]=sel-011, b[4]=sel-011, b[5]=sel-011, b[6]=sel-011, b[7]=sel-011, b[8]=sel-011, b[9]=sel-011, b[10]=sel-011, b[11]=sel-011, b[12]=sel-011, b[13]=sel-011, b[14]=sel-011, b[15]=sel-011, out=selected-d);
    And16 (a=e, b[0]=sel-100, b[1]=sel-100, b[2]=sel-100, b[3]=sel-100, b[4]=sel-100, b[5]=sel-100, b[6]=sel-100, b[7]=sel-100, b[8]=sel-100, b[9]=sel-100, b[10]=sel-100, b[11]=sel-100, b[12]=sel-100, b[13]=sel-100, b[14]=sel-100, b[15]=sel-100, out=selected-e);
    And16 (a=f, b[0]=sel-101, b[1]=sel-101, b[2]=sel-101, b[3]=sel-101, b[4]=sel-101, b[5]=sel-101, b[6]=sel-101, b[7]=sel-101, b[8]=sel-101, b[9]=sel-101, b[10]=sel-101, b[11]=sel-101, b[12]=sel-101, b[13]=sel-101, b[14]=sel-101, b[15]=sel-101, out=selected-f);
    And16 (a=g, b[0]=sel-110, b[1]=sel-110, b[2]=sel-110, b[3]=sel-110, b[4]=sel-110, b[5]=sel-110, b[6]=sel-110, b[7]=sel-110, b[8]=sel-110, b[9]=sel-110, b[10]=sel-110, b[11]=sel-110, b[12]=sel-110, b[13]=sel-110, b[14]=sel-110, b[15]=sel-110, out=selected-g);
    And16 (a=h, b[0]=sel-111, b[1]=sel-111, b[2]=sel-111, b[3]=sel-111, b[4]=sel-111, b[5]=sel-111, b[6]=sel-111, b[7]=sel-111, b[8]=sel-111, b[9]=sel-111, b[10]=sel-111, b[11]=sel-111, b[12]=sel-111, b[13]=sel-111, b[14]=sel-111, b[15]=sel-111, out=selected-h);

    Or16  (a=selected-a, b=selected-b, out=aOrb);
    Or16  (a=aOrb, b=selected-c, out=aOrbOrc);
    Or16  (a=aOrbOrc, b=selected-d, out=aOrbOrcOrd);
    Or16  (a=aOrbOrcOrd, b=selected-e, out=aOrbOrcOrdOre);
    Or16  (a=aOrbOrcOrdOre, b=selected-f, out=aOrbOrcOrdOreOrf);
    Or16  (a=aOrbOrcOrdOreOrf, b=selected-g, out=aOrbOrcOrdOreOrfOrg);
    Or16  (a=aOrbOrcOrdOreOrfOrg, b=selected-h, out=out);
}